// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NeonTetra.Data;

#nullable disable

namespace NeonTetra.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240629161920_NewMigration2024-29-06v1")]
    partial class NewMigration20242906v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NeonTetra.Domain.Entities.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Banks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Access Bank"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Citibank"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Diamond Bank"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ecobank"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Fidelity Bank"
                        },
                        new
                        {
                            Id = 6,
                            Name = "First Bank of Nigeria"
                        },
                        new
                        {
                            Id = 7,
                            Name = "First City Monument Bank"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Guaranty Trust Bank"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Heritage Bank"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Keystone Bank"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Polaris Bank"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Providus Bank"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Stanbic IBTC Bank"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Standard Chartered Bank"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Sterling Bank"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Suntrust Bank"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Union Bank"
                        },
                        new
                        {
                            Id = 18,
                            Name = "United Bank for Africa"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Unity Bank"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Wema Bank"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Zenith Bank"
                        });
                });

            modelBuilder.Entity("NeonTetra.Domain.Entities.BankDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("UserId");

                    b.ToTable("BankDetails");
                });

            modelBuilder.Entity("NeonTetra.Domain.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Male"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Female"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Non-binary"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Other"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Prefer not to say"
                        });
                });

            modelBuilder.Entity("NeonTetra.Domain.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Hausa"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Yoruba"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Igbo"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Nigerian Pidgin"
                        });
                });

            modelBuilder.Entity("NeonTetra.Domain.Entities.Niche", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Niches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Blogging"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Vlogging"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Podcasting"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Social Media Influencing"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Photography"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Videography"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Graphic Design"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Writing"
                        });
                });

            modelBuilder.Entity("NeonTetra.Domain.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Abia"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Adamawa"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Akwa Ibom"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Anambra"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Bauchi"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Bayelsa"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Benue"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Borno"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Cross River"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Delta"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Ebonyi"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Edo"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Ekiti"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Enugu"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Gombe"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Imo"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Jigawa"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Kaduna"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Kano"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Katsina"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Kebbi"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Kogi"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Kwara"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Lagos"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Nasarawa"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Niger"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Ogun"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Ondo"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Osun"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Oyo"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Plateau"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Rivers"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Sokoto"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Taraba"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Yobe"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Zamfara"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Federal Capital Territory"
                        });
                });

            modelBuilder.Entity("NeonTetra.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<double?>("AdditonalHookPrice")
                        .HasColumnType("double");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("DeliveryTime")
                        .HasColumnType("longtext");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<double?>("Price")
                        .HasColumnType("double");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("ShortBio")
                        .HasColumnType("longtext");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("StateId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("NeonTetra.Domain.Entities.UserLanguage", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("UserLanguages");
                });

            modelBuilder.Entity("NeonTetra.Domain.Entities.UserNiche", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("NicheId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "NicheId");

                    b.HasIndex("NicheId");

                    b.ToTable("UserNiches");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NeonTetra.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NeonTetra.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeonTetra.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NeonTetra.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NeonTetra.Domain.Entities.BankDetails", b =>
                {
                    b.HasOne("NeonTetra.Domain.Entities.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeonTetra.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Bank");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NeonTetra.Domain.Entities.User", b =>
                {
                    b.HasOne("NeonTetra.Domain.Entities.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("NeonTetra.Domain.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("Gender");

                    b.Navigation("State");
                });

            modelBuilder.Entity("NeonTetra.Domain.Entities.UserLanguage", b =>
                {
                    b.HasOne("NeonTetra.Domain.Entities.Language", "Language")
                        .WithMany("UserLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeonTetra.Domain.Entities.User", "User")
                        .WithMany("UserLanguages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NeonTetra.Domain.Entities.UserNiche", b =>
                {
                    b.HasOne("NeonTetra.Domain.Entities.Niche", "Niche")
                        .WithMany("UserNiches")
                        .HasForeignKey("NicheId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeonTetra.Domain.Entities.User", "User")
                        .WithMany("UserNiches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Niche");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NeonTetra.Domain.Entities.Language", b =>
                {
                    b.Navigation("UserLanguages");
                });

            modelBuilder.Entity("NeonTetra.Domain.Entities.Niche", b =>
                {
                    b.Navigation("UserNiches");
                });

            modelBuilder.Entity("NeonTetra.Domain.Entities.User", b =>
                {
                    b.Navigation("UserLanguages");

                    b.Navigation("UserNiches");
                });
#pragma warning restore 612, 618
        }
    }
}
